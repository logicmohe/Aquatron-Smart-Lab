#!/usr/bin/env python3

SENSOR_CONFIG = '/etc/aquatron/sensors.conf'

import time
import configparser
import sys
import os
import json
from pathlib import Path
import RPi.GPIO as GPIO
import board
import busio
import adafruit_si7021
import Adafruit_ADS1x15
import dataset

i2c = busio.I2C(board.SCL, board.SDA)
adc = Adafruit_ADS1x15.ADS1015()

DEFAULT_CONFIG_STR = (
'''# Global config
[Global]
# sensor polling period in seconds
Period = 10
OWFS Mountpoint = /mnt/owfs

# Write list of sensors here.
# Example:
# [Water Tank 1 Temperature]
# Bus = 1wire
# Address = 0x123
# Model = abc123
'''
)

########################################################################
# read_config
# receives: path to sensor config file as string
# does: creates path and file if either DNE, parses config
# returns: ConfigParser object filled with parsed info
########################################################################
def read_config(path_str):
	config_path = Path(path_str)
	# check if directory exists
	if not os.path.exists(config_path.parent):
		# create path
		try:
			os.mkdir(config_path.parent)
		except OSError as err:
			print("OS error: {0}".format(err))
			print("Are you root?")
			sys.exit(1)
	# check if file exists
	if not os.path.exists(config_path):
		# create path
		try:
			f = open(config_path, "w")
			f.write(DEFAULT_CONFIG_STR)
			f.close()
			print(f'Please populate {SENSOR_CONFIG}')
			sys.exit(0)
		except OSError as err:
			print("OS error: {0}".format(err))
			print("Are you root?")
			sys.exit(1)
	# file exists
	config = configparser.ConfigParser()
	try:
		config.read(config_path)
	except OSError as err:
		print("OS error: {0}".format(err))
		print("Are you root?")
		sys.exit(1)
	return config

########################################################################
# get_global_conf
# receives: ConfigParser object filled with parsed info
# does: grabs global section and deletes it from passed dictionary
# returns: ConfigParser object filled with only sensor info
########################################################################
def get_global_conf(config):
	glob = {}
	if "Global" in config:
		if "Period" in config["Global"]:
			try:
				glob["Period"] = float(config["Global"]["Period"])
			except ValueError as err:
				print("Invalid period in [Global]: {0}".format(err))
				print("Defaulting to Period = 10")
				glob["Period"] = 10.0
		else:
			# default to 10 second poll period
			print("Warning: no Period in [Global] in config. Default: 10")
			glob["Period"] = 10.0
		if "OWFS Mountpoint" in config["Global"]:
			glob["owfs"] = config["Global"]["OWFS Mountpoint"]
		else:
			print("Warning: no OWFS Mountpoint set in config. Default: /mnt/owfs")
			glob["owfs"] = "/mnt/owfs"
		del config["Global"]
	else:
		# default to 10 second poll period
		print("Warning: no [Global] section in config. Default period: 10")
		glob["Period"] = 10.0
		print("Warning: no OWFS Mountpoint set in config. Default: /mnt/owfs")
		glob["owfs"] = "/mnt/owfs"
	return glob

########################################################################
# build_sensor_lists
# receives: ConfigParser object obtained from read_config()
# does: sorts sensors from config into 1wire sensor list, i2c sensor
#       list, analog sensor lise, and digital IO sensor list,
#       verifying that needed fields are there
# returns: tuple of lists (oneWire, i2c, digitalIO, analog)
########################################################################
def build_sensor_lists(config):
	oneWire = []
	i2c = []
	digitalIO = []
	analog = []
	oneWireNames = ["1WIRE", "ONEWIRE"]
	i2cNames = ["2WIRE", "TWOWIRE", "TWI", "I2C"]
	digitalIONames = ["GPIO", "DIGITAL", "IO", "DIGITALIO", "BOOL", "BOOLEAN"]
	analogNames = ["ANALOG"]
	errors = False
	for friendly_name in config.sections():
		s = config[friendly_name]
		if "Bus" not in s:
			print(f'Bus type not specified for {friendly_name}.')
			errors = True
			continue
		
		sensor = {"Value" : None}
		sensor["name"] = friendly_name
		
		if "Address" in s:
			sensor["addr"] = s["Address"]
		elif s["Model"].upper() != "SI7021":
			print(f'Address type not specified for {friendly_name}.')
			errors = True
		
		bus = s["Bus"].upper()
		
		if "Model" in s:
			sensor["model"] = s["Model"].upper()
		elif bus not in digitalIONames + analogNames:
			print(f'Model number not specified for {friendly_name}.')
			errors = True
		
		if bus in oneWireNames:
			oneWire.append(sensor.copy())
		elif bus in i2cNames:
			if sensor["model"] == "SI7021":
				sensor["type"] = "temperature"
				i2c.append(sensor.copy())
				i2c[-1]["name"] += "(temperature)"
				sensor["type"] = "humidity"
				i2c.append(sensor.copy())
				i2c[-1]["name"] += "(humidity)"
			else:
				i2c.append(sensor.copy())
		elif bus in digitalIONames:
			try:
				sensor["addr"] = int(sensor["addr"])
			except ValueError:
				print(f'{sensor["name"]} has invalid address')
				errors = True
			GPIO.setup(sensor["addr"], GPIO.IN)
			digitalIO.append(sensor.copy())
		elif bus in analogNames:
			try:
				sensor["addr"] = int(sensor["addr"])
			except ValueError:
				print(f'{sensor["name"]} has invalid address')
				errors = True
			analog.append(sensor.copy())
		else: # unknown bus type
			print(f'Unknown bus type for {friendly_name}: {s["Bus"]}')
			errors = True
	if errors:
		print(f'Please fix these errors in {SENSOR_CONFIG}')
		sys.exit(1)
	return oneWire, i2c, digitalIO, analog

########################################################################
# read_owfs
# receives: list of 1wire sensor dictionaries, owfs mountpoint Path
# does: reads virtual device file in owfs vfs, stores value into
#       sensor["value"]. Also stores timestamp.
# returns: nothing
########################################################################
def read_owfs(sensor, owfs):
	# TODO: check for key error in list, add more devices
	try:
		vfile = owfs / Path(sensor["addr"]) / Path({
			"DS18B20" : "temperature"
		}[sensor["model"]])
	except KeyError:
		print("Don't know how to read this sensor model: ", sensor["model"])
	if os.path.exists(vfile):
		sensor["timestamp"] = time.time()
		sensor["value"] = str(open(vfile).read())
	else:
		print("Error reading from sensor.")
		print(vfile)

########################################################################
# read_i2c
# receives: list of i2s sensor dictionaries
# does: reads sensor value, stores value into
#       sensor["value"]. Also stores timestamp.
# returns: nothing
########################################################################
def read_i2c(sensor):
	sensor["timestamp"] = time.time()
	if sensor["model"] == "SI7021":
		temp = adafruit_si7021.SI7021(i2c)
		if sensor["type"] == "temperature":
			sensor["value"] = str(temp.temperature)
		elif sensor["type"] == "humidity":
			sensor["value"] = str(temp.relative_humidity)
	else:
		print("Don't know how to read this sensor model: ", sensor["model"])

########################################################################
# read_digitalIO
# receives: list of IO sensor dictionaries
# does: reads gpio pin, stores value into
#       sensor["value"]. Also stores timestamp.
# returns: nothing
########################################################################
def read_digitalIO(sensor):
	sensor["timestamp"] = time.time()
	sensor["value"] = str(GPIO.input(sensor["addr"]))

########################################################################
# read_analog
# receives: list of analog sensor dictionaries
# does: reads analog adc pin, stores value into
#       sensor["value"]. Also stores timestamp.
# returns: nothing
########################################################################
def read_analog(sensor):
	sensor["timestamp"] = time.time()
	sensor["value"] = str(adc.read_adc(sensor["addr"], gain=1))

########################################################################
# loop
# receives: oneWire, i2c, digitalIO, analog sensor lists and poll period
# does: reads each sensor, stores data into db once every pollPeriod
# returns: nothing
########################################################################
def loop(oneWire, i2c, digitalIO, analog, global_conf):
	pollPeriod = global_conf["Period"]
	running = True
	owfs_path = Path(global_conf["owfs"])
	aq_dir = os.getenv("HOME") + '/.aquatron'
	if not os.path.exists(aq_dir):
		os.mkdir(aq_dir)
	db = dataset.connect('sqlite://' + aq_dir + '/db.sqlite')
	starttime = time.time()
	while running:
		# read data
		for sensor in oneWire:
			read_owfs(sensor, owfs_path)
		for sensor in i2c:
			read_i2c(sensor)
		for sensor in digitalIO:
			read_digitalIO(sensor)
		for sensor in analog:
			read_analog(sensor)
		# store data
		for sensor in oneWire + i2c + digitalIO + analog:
			print(f'{sensor["timestamp"]}: {sensor["name"]}: {sensor["value"]}')
			try:
				db.begin()
			except:
				print(f'Error opening db: ', 'sqlite://' + aq_dir + '/db.sqlite')
			try:
				db["sensor_data"].insert(dict(
					name = sensor["name"], timestamp=sensor["timestamp"],
					value = sensor["value"]
				))
				db.commit()
			except:
				db.rollback()
		print()
		# sleep for period
		time.sleep(pollPeriod - ((time.time() - starttime) % pollPeriod))

def main():
	GPIO.setmode(GPIO.BCM)
	config = read_config(SENSOR_CONFIG)
	global_conf = get_global_conf(config)
	oneWire, i2c, digitalIO, analog = build_sensor_lists(config)
	print("1wire devices: ", json.dumps(oneWire, indent = 2))
	print("i2c devices: ", json.dumps(i2c, indent = 2))
	print("digitalIO devices: ", json.dumps(digitalIO, indent = 2))
	print("analog devices: ", json.dumps(analog, indent = 2))
	print("poll period: ", global_conf["Period"])
	loop(oneWire, i2c, digitalIO, analog, global_conf)

if __name__ == "__main__":
	main()
