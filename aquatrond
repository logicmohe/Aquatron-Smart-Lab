#!/usr/bin/env python3

#    aquatrond - Backend daemon for aquatron system
#
#    Copyright (C) 2020 Josh Boudreau <josh.boudreau@dal.ca>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

SENSOR_CONFIG = '/etc/aquatron/sensors.conf'

import time
import configparser
import sys
import os
import json
from pathlib import Path
import RPi.GPIO as GPIO
import board
import busio
import adafruit_si7021
import Adafruit_ADS1x15
import adafruit_veml7700
import dataset
import signal
import paho.mqtt.client as mqtt

i2c = busio.I2C(board.SCL, board.SDA)
adc = Adafruit_ADS1x15.ADS1015()

DEFAULT_CONFIG_STR = (
'''# Global config
[Global]
# sensor polling period in minutes
Period = 10
ThingsBoard Host = 
ThingsBoard Access Token = 
Log Level = 1

# Write list of sensors here.
# Example:
# [Water Tank 1 Temperature]
# Bus = 1wire
# Address = 0x123
# Model = abc123
'''
)

log_lvl = 1 # 0 - quiet, 1 - normal, 2 - debug
def log_msg(lvl, *args, **kwargs):
	if lvl >= log_lvl:
		print(*args, flush=True, **kwargs)

def err_msg(*args, **kwargs):
	print(*args, file=sys.stderr, flush=True, **kwargs)

########################################################################
# read_config
# receives: path to sensor config file as string
# does: creates path and file if either DNE, parses config
# returns: ConfigParser object filled with parsed info
########################################################################
def read_config(path_str):
	config_path = Path(path_str)
	# check if directory exists
	if not os.path.exists(config_path.parent):
		# create path
		try:
			os.mkdir(config_path.parent)
		except OSError as err:
			err_msg("OS error: {0}".format(err))
			err_msg("Are you root?")
			sys.exit(1)
	# check if file exists
	if not os.path.exists(config_path):
		# create path
		try:
			f = open(config_path, "w")
			f.write(DEFAULT_CONFIG_STR)
			f.close()
			err_msg(f'Please populate {SENSOR_CONFIG}')
			sys.exit(0)
		except OSError as err:
			err_msg("OS error: {0}".format(err))
			err_msg("Are you root?")
			sys.exit(1)
	# file exists
	config = configparser.ConfigParser()
	try:
		config.read(config_path)
	except OSError as err:
		err_msg("OS error: {0}".format(err))
		err_msg("Are you root?")
		sys.exit(1)
	log_msg(1, "Configuration loaded.")
	return config

########################################################################
# get_global_conf
# receives: ConfigParser object filled with parsed info
# does: grabs global section and deletes it from passed dictionary
# returns: ConfigParser object filled with only sensor info
########################################################################
def get_global_conf(config):
	glob = {}
	if "Global" in config:
		if "Period" in config["Global"]:
			try:
				glob["Period"] = float(config["Global"]["Period"])
			except ValueError as err:
				err_msg("Invalid period in [Global]: {0}".format(err))
				err_msg("Defaulting to Period = 10")
				glob["Period"] = 10.0
		else:
			# default to 10 minute poll period
			err_msg("Warning: no Period in [Global] in config. Default: 10")
			glob["Period"] = 10.0
		if "OWFS Mountpoint" in config["Global"]:
			glob["owfs"] = config["Global"]["OWFS Mountpoint"]
		else:
			glob["owfs"] = "/mnt/1wire" # default
		if "ThingsBoard Host" in config["Global"]:
			glob["tb_host"] = config["Global"]["ThingsBoard Host"]
			if "ThingsBoard Access Token" in config["Global"]:
				glob["use_tb"] = True
				glob["tb_token"] = config["Global"]["ThingsBoard Access Token"]
			else:
				err_msg("Warning: No ThingsBoard Access Token set in config. Not using Thingsboard.");
				glob["use_tb"] = False
		else:
			err_msg("Warning: No ThingsBoard Host set in config. Not using Thingsboard.");
			glob["use_tb"] = False
		if "Log Level" in config["Global"]:
			global log_lvl
			try:
				log_lvl = config["Global"]
			except ValueError as err:
				err_msg("Invalid Log Level in [Global]: {0}".format(err))
				err_msg("Defaulting to Log Level = 1")
				log_lvl = 1
		del config["Global"]
	else:
		# default to 10 second poll period
		err_msg("Warning: no [Global] section in config. Default period: 10")
		glob["Period"] = 10.0
		err_msg("Warning: no OWFS Mountpoint set in config. Default: /mnt/owfs")
		glob["owfs"] = "/mnt/owfs"
	return glob

########################################################################
# build_sensor_lists
# receives: ConfigParser object obtained from read_config()
# does: sorts sensors from config into 1wire sensor list, i2c sensor
#       list, analog sensor lise, and digital IO sensor list,
#       verifying that needed fields are there
# returns: tuple of lists (oneWire, i2c, digitalIO, analog)
########################################################################
def build_sensor_lists(config):
	log_msg(2, "Loading sensor list.")
	oneWire = []
	i2c = []
	digitalIO = []
	analog = []
	oneWireNames = ["1WIRE", "ONEWIRE"]
	i2cNames = ["2WIRE", "TWOWIRE", "TWI", "I2C"]
	digitalIONames = ["GPIO", "DIGITAL", "IO", "DIGITALIO", "BOOL", "BOOLEAN"]
	analogNames = ["ANALOG"]
	
	dontNeedAddress = ["SI7021", "VEML7700"]
	
	errors = False
	for friendly_name in config.sections():
		s = config[friendly_name]
		if "Bus" not in s:
			err_msg(f'Bus type not specified for {friendly_name}.')
			errors = True
			continue
		
		sensor = {"value" : None}
		sensor["name"] = friendly_name
		
		if "Address" in s:
			sensor["addr"] = s["Address"]
		elif s["Model"].upper() not in dontNeedAddress:
			err_msg(f'Address type not specified for {friendly_name}.')
			errors = True
		
		bus = s["Bus"].upper()
		
		if "Model" in s:
			sensor["model"] = s["Model"].upper()
		elif bus not in digitalIONames + analogNames:
			err_msg(f'Model number not specified for {friendly_name}.')
			errors = True
		
		if bus in oneWireNames:
			oneWire.append(sensor.copy())
		elif bus in i2cNames:
			if sensor["model"] == "SI7021":
				sensor["type"] = "temperature"
				i2c.append(sensor.copy())
				i2c[-1]["name"] += "(temperature)"
				sensor["type"] = "humidity"
				i2c.append(sensor.copy())
				i2c[-1]["name"] += "(humidity)"
			else:
				i2c.append(sensor.copy())
		elif bus in digitalIONames:
			try:
				sensor["addr"] = int(sensor["addr"])
			except ValueError:
				err_msg(f'{sensor["name"]} has invalid address')
				errors = True
			GPIO.setup(sensor["addr"], GPIO.IN)
			digitalIO.append(sensor.copy())
		elif bus in analogNames:
			try:
				sensor["addr"] = int(sensor["addr"])
			except ValueError:
				err_msg(f'{sensor["name"]} has invalid address')
				errors = True
			analog.append(sensor.copy())
		else: # unknown bus type
			err_msg(f'Unknown bus type for {friendly_name}: {s["Bus"]}')
			errors = True
	if errors:
		err_msg(f'Please fix these errors in {SENSOR_CONFIG}')
		sys.exit(1)
	return oneWire, i2c, digitalIO, analog

########################################################################
# read_owfs
# receives: list of 1wire sensor dictionaries, owfs mountpoint Path
# does: reads virtual device file in owfs vfs, stores value into
#       sensor["value"]. Also stores timestamp.
# returns: nothing
########################################################################
def read_owfs(sensor, owfs):
	# TODO: check for key error in list, add more devices
	sensor["timestamp"] = time.time()
	try:
		vfile = owfs / Path(sensor["addr"]) / Path({
			"DS18B20" : "temperature"
		}[sensor["model"]])
	except KeyError:
		err_msg("Don't know how to read this sensor model: ", sensor["model"])
	if os.path.exists(vfile):
		sensor["value"] = open(vfile).read()
	else:
		err_msg("Error reading from sensor.")
		err_msg(vfile)

########################################################################
# read_i2c
# receives: list of i2s sensor dictionaries
# does: reads sensor value, stores value into
#       sensor["value"]. Also stores timestamp.
# returns: nothing
########################################################################
def read_i2c(sensor):
	sensor["timestamp"] = time.time()
	if sensor["model"] == "SI7021":
		try:
			temp = adafruit_si7021.SI7021(i2c)
		except ValueError as err:
			err_msg("Error reading from SI7021:\n{0}".format(err))
			err_msg("Is it attached and do you have the right address?")
			return
		if sensor["type"] == "temperature":
			sensor["value"] = temp.temperature
		elif sensor["type"] == "humidity":
			sensor["value"] = temp.relative_humidity
	elif sensor["model"] == "VEML7700":
		sensor["value"] = adafruit_veml7700.VEML7700(i2c).lux
	else:
		err_msg("Don't know how to read this sensor model: ", sensor["model"])

########################################################################
# read_digitalIO
# receives: list of IO sensor dictionaries
# does: reads gpio pin, stores value into
#       sensor["value"]. Also stores timestamp.
# returns: nothing
########################################################################
def read_digitalIO(sensor):
	sensor["timestamp"] = time.time()
	sensor["value"] = GPIO.input(sensor["addr"])

########################################################################
# read_analog
# receives: list of analog sensor dictionaries
# does: reads analog adc pin, stores value into
#       sensor["value"]. Also stores timestamp.
# returns: nothing
########################################################################
def read_analog(sensor):
	sensor["timestamp"] = time.time()
	sensor["value"] = adc.read_adc(sensor["addr"], gain=1)

########################################################################
# loop
# receives: oneWire, i2c, digitalIO, analog sensor lists and poll period
# does: reads each sensor, stores data into db once every pollPeriod
# returns: nothing
########################################################################
def loop(oneWire, i2c, digitalIO, analog, global_conf):
	pollPeriod = global_conf["Period"]
	running = True
	sleeping = False
	def sig_handler(*args):
		nonlocal running
		nonlocal sleeping
		log_msg(1, "Graceful exit.")
		running = False
		if sleeping: # exit immediately
			sys.exit(0)
	signal.signal(signal.SIGINT, sig_handler)
	owfs_path = Path(global_conf["owfs"])
	aq_dir = '/run/aquatron'
	if not os.path.exists(aq_dir):
		os.mkdir(aq_dir)
		os.chmod(aq_dir, 0o777);
	db = dataset.connect('sqlite:///' + aq_dir + '/db.sqlite')
	thingsboard_client = None
	if global_conf["use_tb"]:
		thingsboard_client
		thingsboard_client = mqtt.Client()
		thingsboard_client.username_pw_set(global_conf["tb_token"])
		thingsboard_client.connect(global_conf["tb_host"], 1883, 60)
		thingsboard_client.loop_start()
	starttime = time.time()
	while running:
		# read data
		log_msg(2, "Reading sensor data.")
		for sensor in oneWire:
			read_owfs(sensor, owfs_path)
		for sensor in i2c:
			read_i2c(sensor)
		for sensor in digitalIO:
			read_digitalIO(sensor)
		for sensor in analog:
			read_analog(sensor)
		# store data
		log_msg(2, "Storing data in database.")
		for sensor in oneWire + i2c + digitalIO + analog:
			log_msg(2,f'{sensor["timestamp"]}: {sensor["name"]}: {sensor["value"]}')
			db.begin()
			try:
				db["sensor_data"].insert(dict(
					timestamp=sensor["timestamp"], name = sensor["name"],
					value = sensor["value"]
				))
				db.commit()
			except Exception as err:
				err_msg("Error storing data in database:\n{0}".format(err))
				db.rollback()
		# upload data
		if global_conf["use_tb"]:
			log_msg(2, "Uploading data to ThingsBoard.")
			payload = {}
			for sensor in oneWire + i2c + digitalIO + analog:
				payload[sensor["name"]] = sensor["value"]
			thingsboard_client.publish('v1/devices/me/telemetry', json.dumps(payload), 1)
		# sleep for period
		if running:
			sleeping = True
			log_msg(2, f'Going to sleep for {pollPeriod} minutes.')
			time.sleep((pollPeriod * 60.0) - ((time.time() - starttime) % (pollPeriod * 60.0)))
			sleeping = False
	if global_conf["use_tb"]:
		thingsboard_client.loop_stop()
		thingsboard_client.disconnect()

def main():
	log_msg(1, "aquatrond started.")
	GPIO.setmode(GPIO.BCM)
	config = read_config(SENSOR_CONFIG)
	global_conf = get_global_conf(config)
	oneWire, i2c, digitalIO, analog = build_sensor_lists(config)
	log_msg(2, "1wire devices: ", json.dumps(oneWire, indent = 2))
	log_msg(2, "i2c devices: ", json.dumps(i2c, indent = 2))
	log_msg(2, "digitalIO devices: ", json.dumps(digitalIO, indent = 2))
	log_msg(2, "analog devices: ", json.dumps(analog, indent = 2))
	log_msg(2, "poll period: ", global_conf["Period"])
	loop(oneWire, i2c, digitalIO, analog, global_conf)

if __name__ == "__main__":
	main()
